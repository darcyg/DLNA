//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "XamlTypeInfo.g.h"

#include "CartoonizeImageView.xaml.h"
#include "CropImageView.xaml.h"
#include "ImageBrowserView.xaml.h"
#include "ImageView.xaml.h"
#include "MainHubView.xaml.h"
#include "App.xaml.h"
#include "RotateImageView.xaml.h"

#include "CartoonizeImageView.g.hpp"
#include "CropImageView.g.hpp"
#include "ImageBrowserView.g.hpp"
#include "ImageView.g.hpp"
#include "MainHubView.g.hpp"
#include "App.g.hpp"
#include "RotateImageView.g.hpp"

::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::OtherProviders::get()
{
    if(_otherProviders == nullptr)
    {
        _otherProviders = ref new ::Platform::Collections::Vector<::Windows::UI::Xaml::Markup::IXamlMetadataProvider^>();
    }
    return _otherProviders;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForName(::Platform::String^ typeName)
{
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(typeName);
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }
    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CheckOtherMetadataProvidersForType(::Windows::UI::Xaml::Interop::TypeName t)
{
    for (unsigned int i = 0; i < OtherProviders->Size; i++)
    {
        auto xamlType = OtherProviders->GetAt(i)->GetXamlType(t);
        if(xamlType != nullptr)
        {
            return xamlType;
        }
    }
    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlType^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlType(::Platform::String^ typeName)
{
    if (typeName == L"Object")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.DependencyObject")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.Page")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.UserControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"String")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.GridView")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Controls.ItemsControl")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Input.ICommand")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Boolean")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Media.Imaging.BitmapImage")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"UInt64")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Interop.TypeName")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"UInt32")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Int32")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Double")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Media.ImageSource")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Windows.UI.Xaml.Thickness")
    {
        return ref new XamlSystemBaseType(typeName);
    }

    if (typeName == L"Hilo.ViewModelLocator")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::ViewModelLocator(); 
            };
        userType->AddMemberName(L"CartoonizeImageVM");
        userType->AddMemberName(L"RotateImageVM");
        userType->AddMemberName(L"CropImageVM");
        userType->AddMemberName(L"ImageVM");
        userType->AddMemberName(L"MainHubVM");
        userType->AddMemberName(L"ImageBrowserVM");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.CartoonizeImageViewModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.ImageBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Phases");
        userType->AddMemberName(L"NeighborWindow");
        userType->AddMemberName(L"InProgress");
        userType->AddMemberName(L"CancelCommand");
        userType->AddMemberName(L"SaveCommand");
        userType->AddMemberName(L"ResumeCartoonizeCommand");
        userType->AddMemberName(L"CartoonizeCommand");
        userType->AddMemberName(L"Image");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.ImageBase")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.ViewModelBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        return userType;
    }

    if (typeName == L"Hilo.ViewModelBase")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.Common.BindableBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"IsAppBarSticky");
        userType->AddMemberName(L"IsAppBarOpen");
        userType->AddMemberName(L"IsAppBarEnabled");
        return userType;
    }

    if (typeName == L"Hilo.Common.BindableBase")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.DependencyObject"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Type");
        return userType;
    }

    if (typeName == L"Hilo.RotateImageViewModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.ImageBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"RotationAngle");
        userType->AddMemberName(L"InProgress");
        userType->AddMemberName(L"ImageMargin");
        userType->AddMemberName(L"CancelCommand");
        userType->AddMemberName(L"SaveCommand");
        userType->AddMemberName(L"ResumeRotateCommand");
        userType->AddMemberName(L"RotateCommand");
        userType->AddMemberName(L"Photo");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.CropImageViewModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.ImageBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"IsCropOverlayVisible");
        userType->AddMemberName(L"CropOverlayWidth");
        userType->AddMemberName(L"CropOverlayHeight");
        userType->AddMemberName(L"CropOverlayTop");
        userType->AddMemberName(L"CropOverlayLeft");
        userType->AddMemberName(L"InProgress");
        userType->AddMemberName(L"ResumeCropCommand");
        userType->AddMemberName(L"CancelCommand");
        userType->AddMemberName(L"SaveCommand");
        userType->AddMemberName(L"Image");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.ImageViewModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.ViewModelBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"CartoonizeImageCommand");
        userType->AddMemberName(L"RotateImageCommand");
        userType->AddMemberName(L"CropImageCommand");
        userType->AddMemberName(L"MonthAndYear");
        userType->AddMemberName(L"SelectedItem");
        userType->AddMemberName(L"Photos");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.MainHubViewModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.ViewModelBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"SelectedItem");
        userType->AddMemberName(L"CartoonizeImageCommand");
        userType->AddMemberName(L"RotateImageCommand");
        userType->AddMemberName(L"CropImageCommand");
        userType->AddMemberName(L"NavigateToPicturesCommand");
        userType->AddMemberName(L"PhotoGroups");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.ImageBrowserViewModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.ViewModelBase"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"SelectedItem");
        userType->AddMemberName(L"CartoonizeImageCommand");
        userType->AddMemberName(L"RotateImageCommand");
        userType->AddMemberName(L"CropImageCommand");
        userType->AddMemberName(L"GroupCommand");
        userType->AddMemberName(L"InProgress");
        userType->AddMemberName(L"YearGroups");
        userType->AddMemberName(L"MonthGroups");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.HiloPage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.Common.LayoutAwarePage"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        return userType;
    }

    if (typeName == L"Hilo.Common.LayoutAwarePage")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.Page"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"DefaultViewModel");
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableMap<String, Object>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->DictionaryAdd =
            [](Object^ instance, Object^ key, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableMap<::Platform::String^, ::Platform::Object^>^)instance;
                auto newKey = (Platform::String^)key;
                auto newItem = (Platform::Object^)item;
                collection->Insert(newKey, newItem);
            };
        return userType;
    }

    if (typeName == L"Hilo.CartoonizeImageView")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.HiloPage"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::CartoonizeImageView(); 
            };
        return userType;
    }

    if (typeName == L"Hilo.Common.BooleanToVisibilityConverter")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::Common::BooleanToVisibilityConverter(); 
            };
        return userType;
    }

    if (typeName == L"Hilo.CropImageView")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.HiloPage"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::CropImageView(); 
            };
        return userType;
    }

    if (typeName == L"Hilo.BooleanToBrushConverter")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::BooleanToBrushConverter(); 
            };
        return userType;
    }

    if (typeName == L"Hilo.Common.BooleanNegationConverter")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::Common::BooleanNegationConverter(); 
            };
        return userType;
    }

    if (typeName == L"Hilo.ImageBrowserView")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.HiloPage"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::ImageBrowserView(); 
            };
        return userType;
    }

    if (typeName == L"Hilo.FileSizeConverter")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::FileSizeConverter(); 
            };
        return userType;
    }

    if (typeName == L"Hilo.ImageView")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.HiloPage"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::ImageView(); 
            };
        return userType;
    }

    if (typeName == L"Hilo.VariableGridView")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Windows.UI.Xaml.Controls.GridView"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::VariableGridView(); 
            };
        return userType;
    }

    if (typeName == L"Hilo.MainHubView")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.HiloPage"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::MainHubView(); 
            };
        return userType;
    }

    if (typeName == L"Hilo.RotateImageView")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Hilo.HiloPage"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::RotateImageView(); 
            };
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<Hilo.HubPhotoGroup>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<::Hilo::HubPhotoGroup^>^)instance;
                auto newItem = (Hilo::HubPhotoGroup^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Hilo.HubPhotoGroup")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Items");
        userType->AddMemberName(L"Title");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<Hilo.IPhoto>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<::Hilo::IPhoto^>^)instance;
                auto newItem = (Hilo::IPhoto^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Hilo.IPhoto")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"IsInvalidThumbnail");
        userType->AddMemberName(L"Image");
        userType->AddMemberName(L"Thumbnail");
        userType->AddMemberName(L"DisplayType");
        userType->AddMemberName(L"FileSize");
        userType->AddMemberName(L"Resolution");
        userType->AddMemberName(L"FormattedTimeTaken");
        userType->AddMemberName(L"FormattedDateTaken");
        userType->AddMemberName(L"DateTaken");
        userType->AddMemberName(L"FileType");
        userType->AddMemberName(L"FormattedPath");
        userType->AddMemberName(L"Path");
        userType->AddMemberName(L"Name");
        userType->AddMemberName(L"Group");
        return userType;
    }

    if (typeName == L"Windows.Foundation.DateTime")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"System.ValueType"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        return userType;
    }

    if (typeName == L"System.ValueType")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        return userType;
    }

    if (typeName == L"Hilo.IPhotoGroup")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Items");
        userType->AddMemberName(L"Title");
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<Hilo.IYearGroup>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<::Hilo::IYearGroup^>^)instance;
                auto newItem = (Hilo::IYearGroup^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Hilo.IYearGroup")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Items");
        userType->AddMemberName(L"Year");
        userType->AddMemberName(L"Title");
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<Hilo.IMonthBlock>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<::Hilo::IMonthBlock^>^)instance;
                auto newItem = (Hilo::IMonthBlock^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Hilo.IMonthBlock")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Group");
        userType->AddMemberName(L"Month");
        userType->AddMemberName(L"HasPhotos");
        userType->AddMemberName(L"Name");
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<Hilo.IPhotoGroup>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<::Hilo::IPhotoGroup^>^)instance;
                auto newItem = (Hilo::IPhotoGroup^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Hilo.Photo")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"RowSpan");
        userType->AddMemberName(L"ColumnSpan");
        userType->AddMemberName(L"IsInvalidThumbnail");
        userType->AddMemberName(L"Image");
        userType->AddMemberName(L"Thumbnail");
        userType->AddMemberName(L"DisplayType");
        userType->AddMemberName(L"FileSize");
        userType->AddMemberName(L"Resolution");
        userType->AddMemberName(L"FormattedTimeTaken");
        userType->AddMemberName(L"FormattedDateTaken");
        userType->AddMemberName(L"DateTaken");
        userType->AddMemberName(L"FileType");
        userType->AddMemberName(L"FormattedPath");
        userType->AddMemberName(L"Path");
        userType->AddMemberName(L"Name");
        userType->AddMemberName(L"Group");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.MonthGroup")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"IsRunning");
        userType->AddMemberName(L"HasPhotos");
        userType->AddMemberName(L"Items");
        userType->AddMemberName(L"Title");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.YearGroup")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Items");
        userType->AddMemberName(L"Year");
        userType->AddMemberName(L"Title");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.MonthBlock")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Group");
        userType->AddMemberName(L"Month");
        userType->AddMemberName(L"HasPhotos");
        userType->AddMemberName(L"Name");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.DesignTimePhoto")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::DesignTimePhoto(); 
            };
        userType->AddMemberName(L"RowSpan");
        userType->AddMemberName(L"ColumnSpan");
        userType->AddMemberName(L"FormattedPath");
        userType->AddMemberName(L"FileSize");
        userType->AddMemberName(L"FormattedTimeTaken");
        userType->AddMemberName(L"FormattedDateTaken");
        userType->AddMemberName(L"Resolution");
        userType->AddMemberName(L"DisplayType");
        userType->AddMemberName(L"Name");
        userType->AddMemberName(L"Thumbnail");
        userType->AddMemberName(L"Image");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.DesignTimePhotoGroup")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Title");
        userType->AddMemberName(L"Items");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<Hilo.DesignTimePhoto>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<::Hilo::DesignTimePhoto^>^)instance;
                auto newItem = (Hilo::DesignTimePhoto^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Hilo.DesignTimeMonthBlock")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"HasPhotos");
        userType->AddMemberName(L"Name");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Hilo.DesignTimeYearGroup")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->AddMemberName(L"Items");
        userType->AddMemberName(L"Title");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<Hilo.DesignTimeMonthBlock>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<::Hilo::DesignTimeMonthBlock^>^)instance;
                auto newItem = (Hilo::DesignTimeMonthBlock^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Hilo.DesignTimeData")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, GetXamlTypeByName(L"Object"));
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Custom;
        userType->Activator =
            []() -> Platform::Object^ 
            {
                return ref new ::Hilo::DesignTimeData(); 
            };
        userType->AddMemberName(L"ImageBrowserPageTitle");
        userType->AddMemberName(L"AppName");
        userType->AddMemberName(L"MonthAndYear");
        userType->AddMemberName(L"Passes");
        userType->AddMemberName(L"Coarseness");
        userType->AddMemberName(L"SelectedItem");
        userType->AddMemberName(L"Photo");
        userType->AddMemberName(L"YearGroups");
        userType->AddMemberName(L"MonthGroups");
        userType->AddMemberName(L"HubPhotosGroup");
        userType->AddMemberName(L"Photos");
        userType->AddMemberName(L"Image");
        userType->SetIsBindable();
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<Hilo.DesignTimeYearGroup>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<::Hilo::DesignTimeYearGroup^>^)instance;
                auto newItem = (Hilo::DesignTimeYearGroup^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    if (typeName == L"Windows.Foundation.Collections.IObservableVector<Hilo.DesignTimePhotoGroup>")
    {
        ::XamlTypeInfo::InfoProvider::XamlUserType^ userType = ref new ::XamlTypeInfo::InfoProvider::XamlUserType(this, typeName, nullptr);
        userType->KindOfType = ::Windows::UI::Xaml::Interop::TypeKind::Metadata;
        userType->CollectionAdd =
            [](Object^ instance, Object^ item) -> void
            {
                auto collection = (Windows::Foundation::Collections::IObservableVector<::Hilo::DesignTimePhotoGroup^>^)instance;
                auto newItem = (Hilo::DesignTimePhotoGroup^)item;
                collection->Append(newItem);
            };
        return userType;
    }

    return nullptr;
}

::Windows::UI::Xaml::Markup::IXamlMember^ ::XamlTypeInfo::InfoProvider::XamlTypeInfoProvider::CreateXamlMember(::Platform::String^ longMemberName)
{
    if (longMemberName == L"Hilo.ViewModelLocator.CartoonizeImageVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CartoonizeImageVM", L"Hilo.CartoonizeImageViewModel");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ViewModelLocator^)instance;
                return that->CartoonizeImageVM;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ViewModelLocator.RotateImageVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"RotateImageVM", L"Hilo.RotateImageViewModel");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ViewModelLocator^)instance;
                return that->RotateImageVM;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ViewModelLocator.CropImageVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CropImageVM", L"Hilo.CropImageViewModel");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ViewModelLocator^)instance;
                return that->CropImageVM;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ViewModelLocator.ImageVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ImageVM", L"Hilo.ImageViewModel");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ViewModelLocator^)instance;
                return that->ImageVM;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ViewModelLocator.MainHubVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"MainHubVM", L"Hilo.MainHubViewModel");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ViewModelLocator^)instance;
                return that->MainHubVM;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ViewModelLocator.ImageBrowserVM")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ImageBrowserVM", L"Hilo.ImageBrowserViewModel");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ViewModelLocator^)instance;
                return that->ImageBrowserVM;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Common.LayoutAwarePage.DefaultViewModel")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"DefaultViewModel", L"Windows.Foundation.Collections.IObservableMap<String, Object>");
        xamlMember->SetIsDependencyProperty();
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Common::LayoutAwarePage^)instance;
                return that->DefaultViewModel;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::Common::LayoutAwarePage^)instance;
                that->DefaultViewModel = (::Windows::Foundation::Collections::IObservableMap<::Platform::String^, ::Platform::Object^>^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MainHubViewModel.SelectedItem")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SelectedItem", L"Object");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MainHubViewModel^)instance;
                return that->SelectedItem;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::MainHubViewModel^)instance;
                that->SelectedItem = (::Platform::Object^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MainHubViewModel.CartoonizeImageCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CartoonizeImageCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MainHubViewModel^)instance;
                return that->CartoonizeImageCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MainHubViewModel.RotateImageCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"RotateImageCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MainHubViewModel^)instance;
                return that->RotateImageCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MainHubViewModel.CropImageCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CropImageCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MainHubViewModel^)instance;
                return that->CropImageCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MainHubViewModel.NavigateToPicturesCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"NavigateToPicturesCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MainHubViewModel^)instance;
                return that->NavigateToPicturesCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MainHubViewModel.PhotoGroups")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"PhotoGroups", L"Windows.Foundation.Collections.IObservableVector<Hilo.HubPhotoGroup>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MainHubViewModel^)instance;
                return that->PhotoGroups;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.HubPhotoGroup.Items")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Items", L"Windows.Foundation.Collections.IObservableVector<Hilo.IPhoto>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::HubPhotoGroup^)instance;
                return that->Items;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.IsInvalidThumbnail")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"IsInvalidThumbnail", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->IsInvalidThumbnail);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.Image")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Image", L"Windows.UI.Xaml.Media.Imaging.BitmapImage");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                return that->Image;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.Thumbnail")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Thumbnail", L"Windows.UI.Xaml.Media.Imaging.BitmapImage");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                return that->Thumbnail;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.DisplayType")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"DisplayType", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                return that->DisplayType;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.FileSize")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FileSize", L"UInt64");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                auto value = ref new ::Platform::Box<::default::uint64>(that->FileSize);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.Resolution")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Resolution", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                return that->Resolution;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.FormattedTimeTaken")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FormattedTimeTaken", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                return that->FormattedTimeTaken;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.FormattedDateTaken")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FormattedDateTaken", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                return that->FormattedDateTaken;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.DateTaken")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"DateTaken", L"Windows.Foundation.DateTime");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                auto value = ref new ::Platform::Box<::Windows::Foundation::DateTime>(that->DateTaken);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.FileType")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FileType", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                return that->FileType;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.FormattedPath")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FormattedPath", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                return that->FormattedPath;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.Path")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Path", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                return that->Path;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.Name")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Name", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                return that->Name;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhoto.Group")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Group", L"Hilo.IPhotoGroup");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhoto^)instance;
                return that->Group;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.HubPhotoGroup.Title")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::HubPhotoGroup^)instance;
                return that->Title;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ViewModelBase.IsAppBarSticky")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"IsAppBarSticky", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ViewModelBase^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->IsAppBarSticky);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::ViewModelBase^)instance;
                auto boxedValue = (::Platform::IBox<::Platform::Boolean>^)value;
                that->IsAppBarSticky = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ViewModelBase.IsAppBarOpen")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"IsAppBarOpen", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ViewModelBase^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->IsAppBarOpen);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::ViewModelBase^)instance;
                auto boxedValue = (::Platform::IBox<::Platform::Boolean>^)value;
                that->IsAppBarOpen = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ViewModelBase.IsAppBarEnabled")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"IsAppBarEnabled", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ViewModelBase^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->IsAppBarEnabled);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::ViewModelBase^)instance;
                auto boxedValue = (::Platform::IBox<::Platform::Boolean>^)value;
                that->IsAppBarEnabled = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Common.BindableBase.Type")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Type", L"Windows.UI.Xaml.Interop.TypeName");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Common::BindableBase^)instance;
                auto value = ref new ::Platform::Box<::Windows::UI::Xaml::Interop::TypeName>(that->Type);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageBrowserViewModel.SelectedItem")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SelectedItem", L"Object");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageBrowserViewModel^)instance;
                return that->SelectedItem;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::ImageBrowserViewModel^)instance;
                that->SelectedItem = (::Platform::Object^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageBrowserViewModel.CartoonizeImageCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CartoonizeImageCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageBrowserViewModel^)instance;
                return that->CartoonizeImageCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageBrowserViewModel.RotateImageCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"RotateImageCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageBrowserViewModel^)instance;
                return that->RotateImageCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageBrowserViewModel.CropImageCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CropImageCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageBrowserViewModel^)instance;
                return that->CropImageCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageBrowserViewModel.GroupCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"GroupCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageBrowserViewModel^)instance;
                return that->GroupCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageBrowserViewModel.InProgress")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"InProgress", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageBrowserViewModel^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->InProgress);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageBrowserViewModel.YearGroups")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"YearGroups", L"Windows.Foundation.Collections.IObservableVector<Hilo.IYearGroup>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageBrowserViewModel^)instance;
                return that->YearGroups;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IYearGroup.Items")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Items", L"Windows.Foundation.Collections.IObservableVector<Hilo.IMonthBlock>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IYearGroup^)instance;
                return that->Items;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IMonthBlock.Group")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Group", L"Hilo.IYearGroup");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IMonthBlock^)instance;
                return that->Group;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IMonthBlock.Month")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Month", L"UInt32");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IMonthBlock^)instance;
                auto value = ref new ::Platform::Box<::default::uint32>(that->Month);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IMonthBlock.HasPhotos")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"HasPhotos", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IMonthBlock^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->HasPhotos);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IMonthBlock.Name")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Name", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IMonthBlock^)instance;
                return that->Name;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IYearGroup.Year")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Year", L"Int32");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IYearGroup^)instance;
                auto value = ref new ::Platform::Box<::default::int32>(that->Year);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IYearGroup.Title")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IYearGroup^)instance;
                return that->Title;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageBrowserViewModel.MonthGroups")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"MonthGroups", L"Windows.Foundation.Collections.IObservableVector<Hilo.IPhotoGroup>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageBrowserViewModel^)instance;
                return that->MonthGroups;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhotoGroup.Items")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Items", L"Windows.Foundation.Collections.IObservableVector<Hilo.IPhoto>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhotoGroup^)instance;
                return that->Items;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.IPhotoGroup.Title")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::IPhotoGroup^)instance;
                return that->Title;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageViewModel.CartoonizeImageCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CartoonizeImageCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageViewModel^)instance;
                return that->CartoonizeImageCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageViewModel.RotateImageCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"RotateImageCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageViewModel^)instance;
                return that->RotateImageCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageViewModel.CropImageCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CropImageCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageViewModel^)instance;
                return that->CropImageCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageViewModel.MonthAndYear")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"MonthAndYear", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageViewModel^)instance;
                return that->MonthAndYear;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageViewModel.SelectedItem")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SelectedItem", L"Object");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageViewModel^)instance;
                return that->SelectedItem;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::ImageViewModel^)instance;
                that->SelectedItem = (::Platform::Object^)value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.ImageViewModel.Photos")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Photos", L"Windows.Foundation.Collections.IObservableVector<Hilo.IPhoto>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::ImageViewModel^)instance;
                return that->Photos;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CropImageViewModel.IsCropOverlayVisible")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"IsCropOverlayVisible", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CropImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->IsCropOverlayVisible);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CropImageViewModel.CropOverlayWidth")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CropOverlayWidth", L"Double");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CropImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::default::float64>(that->CropOverlayWidth);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CropImageViewModel.CropOverlayHeight")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CropOverlayHeight", L"Double");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CropImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::default::float64>(that->CropOverlayHeight);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CropImageViewModel.CropOverlayTop")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CropOverlayTop", L"Double");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CropImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::default::float64>(that->CropOverlayTop);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CropImageViewModel.CropOverlayLeft")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CropOverlayLeft", L"Double");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CropImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::default::float64>(that->CropOverlayLeft);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CropImageViewModel.InProgress")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"InProgress", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CropImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->InProgress);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CropImageViewModel.ResumeCropCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ResumeCropCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CropImageViewModel^)instance;
                return that->ResumeCropCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CropImageViewModel.CancelCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CancelCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CropImageViewModel^)instance;
                return that->CancelCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CropImageViewModel.SaveCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SaveCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CropImageViewModel^)instance;
                return that->SaveCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CropImageViewModel.Image")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Image", L"Windows.UI.Xaml.Media.ImageSource");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CropImageViewModel^)instance;
                return that->Image;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.RotateImageViewModel.RotationAngle")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"RotationAngle", L"Double");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::RotateImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::default::float64>(that->RotationAngle);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::RotateImageViewModel^)instance;
                auto boxedValue = (::Platform::IBox<::default::float64>^)value;
                that->RotationAngle = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.RotateImageViewModel.InProgress")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"InProgress", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::RotateImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->InProgress);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.RotateImageViewModel.ImageMargin")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ImageMargin", L"Windows.UI.Xaml.Thickness");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::RotateImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::Windows::UI::Xaml::Thickness>(that->ImageMargin);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.RotateImageViewModel.CancelCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CancelCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::RotateImageViewModel^)instance;
                return that->CancelCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.RotateImageViewModel.SaveCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SaveCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::RotateImageViewModel^)instance;
                return that->SaveCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.RotateImageViewModel.ResumeRotateCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ResumeRotateCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::RotateImageViewModel^)instance;
                return that->ResumeRotateCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.RotateImageViewModel.RotateCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"RotateCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::RotateImageViewModel^)instance;
                return that->RotateCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.RotateImageViewModel.Photo")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Photo", L"Hilo.IPhoto");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::RotateImageViewModel^)instance;
                return that->Photo;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CartoonizeImageViewModel.Phases")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Phases", L"Double");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CartoonizeImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::default::float64>(that->Phases);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::CartoonizeImageViewModel^)instance;
                auto boxedValue = (::Platform::IBox<::default::float64>^)value;
                that->Phases = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CartoonizeImageViewModel.NeighborWindow")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"NeighborWindow", L"Double");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CartoonizeImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::default::float64>(that->NeighborWindow);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::CartoonizeImageViewModel^)instance;
                auto boxedValue = (::Platform::IBox<::default::float64>^)value;
                that->NeighborWindow = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CartoonizeImageViewModel.InProgress")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"InProgress", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CartoonizeImageViewModel^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->InProgress);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CartoonizeImageViewModel.CancelCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CancelCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CartoonizeImageViewModel^)instance;
                return that->CancelCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CartoonizeImageViewModel.SaveCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SaveCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CartoonizeImageViewModel^)instance;
                return that->SaveCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CartoonizeImageViewModel.ResumeCartoonizeCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ResumeCartoonizeCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CartoonizeImageViewModel^)instance;
                return that->ResumeCartoonizeCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CartoonizeImageViewModel.CartoonizeCommand")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"CartoonizeCommand", L"Windows.UI.Xaml.Input.ICommand");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CartoonizeImageViewModel^)instance;
                return that->CartoonizeCommand;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.CartoonizeImageViewModel.Image")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Image", L"Windows.UI.Xaml.Media.ImageSource");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::CartoonizeImageViewModel^)instance;
                return that->Image;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.RowSpan")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"RowSpan", L"Int32");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                auto value = ref new ::Platform::Box<::default::int32>(that->RowSpan);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::Photo^)instance;
                auto boxedValue = (::Platform::IBox<::default::int32>^)value;
                that->RowSpan = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.ColumnSpan")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ColumnSpan", L"Int32");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                auto value = ref new ::Platform::Box<::default::int32>(that->ColumnSpan);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::Photo^)instance;
                auto boxedValue = (::Platform::IBox<::default::int32>^)value;
                that->ColumnSpan = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.IsInvalidThumbnail")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"IsInvalidThumbnail", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->IsInvalidThumbnail);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.Image")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Image", L"Windows.UI.Xaml.Media.Imaging.BitmapImage");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                return that->Image;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.Thumbnail")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Thumbnail", L"Windows.UI.Xaml.Media.Imaging.BitmapImage");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                return that->Thumbnail;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.DisplayType")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"DisplayType", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                return that->DisplayType;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.FileSize")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FileSize", L"UInt64");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                auto value = ref new ::Platform::Box<::default::uint64>(that->FileSize);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.Resolution")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Resolution", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                return that->Resolution;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.FormattedTimeTaken")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FormattedTimeTaken", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                return that->FormattedTimeTaken;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.FormattedDateTaken")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FormattedDateTaken", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                return that->FormattedDateTaken;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.DateTaken")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"DateTaken", L"Windows.Foundation.DateTime");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                auto value = ref new ::Platform::Box<::Windows::Foundation::DateTime>(that->DateTaken);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.FileType")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FileType", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                return that->FileType;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.FormattedPath")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FormattedPath", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                return that->FormattedPath;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.Path")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Path", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                return that->Path;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.Name")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Name", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                return that->Name;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.Photo.Group")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Group", L"Hilo.IPhotoGroup");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::Photo^)instance;
                return that->Group;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MonthGroup.IsRunning")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"IsRunning", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MonthGroup^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->IsRunning);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MonthGroup.HasPhotos")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"HasPhotos", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MonthGroup^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->HasPhotos);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MonthGroup.Items")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Items", L"Windows.Foundation.Collections.IObservableVector<Hilo.IPhoto>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MonthGroup^)instance;
                return that->Items;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MonthGroup.Title")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MonthGroup^)instance;
                return that->Title;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.YearGroup.Items")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Items", L"Windows.Foundation.Collections.IObservableVector<Hilo.IMonthBlock>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::YearGroup^)instance;
                return that->Items;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.YearGroup.Year")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Year", L"Int32");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::YearGroup^)instance;
                auto value = ref new ::Platform::Box<::default::int32>(that->Year);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.YearGroup.Title")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::YearGroup^)instance;
                return that->Title;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MonthBlock.Group")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Group", L"Hilo.IYearGroup");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MonthBlock^)instance;
                return that->Group;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MonthBlock.Month")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Month", L"UInt32");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MonthBlock^)instance;
                auto value = ref new ::Platform::Box<::default::uint32>(that->Month);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MonthBlock.HasPhotos")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"HasPhotos", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MonthBlock^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->HasPhotos);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.MonthBlock.Name")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Name", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::MonthBlock^)instance;
                return that->Name;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhoto.RowSpan")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"RowSpan", L"Int32");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                auto value = ref new ::Platform::Box<::default::int32>(that->RowSpan);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                auto boxedValue = (::Platform::IBox<::default::int32>^)value;
                that->RowSpan = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhoto.ColumnSpan")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ColumnSpan", L"Int32");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                auto value = ref new ::Platform::Box<::default::int32>(that->ColumnSpan);
                return value;
            };

        xamlMember->Setter =
            [](Object^ instance, Object^ value) -> void
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                auto boxedValue = (::Platform::IBox<::default::int32>^)value;
                that->ColumnSpan = boxedValue->Value;
            };
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhoto.FormattedPath")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FormattedPath", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                return that->FormattedPath;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhoto.FileSize")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FileSize", L"UInt64");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                auto value = ref new ::Platform::Box<::default::uint64>(that->FileSize);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhoto.FormattedTimeTaken")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FormattedTimeTaken", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                return that->FormattedTimeTaken;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhoto.FormattedDateTaken")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"FormattedDateTaken", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                return that->FormattedDateTaken;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhoto.Resolution")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Resolution", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                return that->Resolution;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhoto.DisplayType")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"DisplayType", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                return that->DisplayType;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhoto.Name")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Name", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                return that->Name;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhoto.Thumbnail")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Thumbnail", L"Windows.UI.Xaml.Media.ImageSource");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                return that->Thumbnail;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhoto.Image")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Image", L"Windows.UI.Xaml.Media.ImageSource");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhoto^)instance;
                return that->Image;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhotoGroup.Title")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhotoGroup^)instance;
                return that->Title;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimePhotoGroup.Items")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Items", L"Windows.Foundation.Collections.IObservableVector<Hilo.DesignTimePhoto>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimePhotoGroup^)instance;
                return that->Items;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeMonthBlock.HasPhotos")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"HasPhotos", L"Boolean");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeMonthBlock^)instance;
                auto value = ref new ::Platform::Box<::Platform::Boolean>(that->HasPhotos);
                return value;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeMonthBlock.Name")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Name", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeMonthBlock^)instance;
                return that->Name;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeYearGroup.Items")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Items", L"Windows.Foundation.Collections.IObservableVector<Hilo.DesignTimeMonthBlock>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeYearGroup^)instance;
                return that->Items;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeYearGroup.Title")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Title", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeYearGroup^)instance;
                return that->Title;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.ImageBrowserPageTitle")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"ImageBrowserPageTitle", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->ImageBrowserPageTitle;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.AppName")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"AppName", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->AppName;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.MonthAndYear")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"MonthAndYear", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->MonthAndYear;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.Passes")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Passes", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->Passes;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.Coarseness")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Coarseness", L"String");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->Coarseness;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.SelectedItem")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"SelectedItem", L"Hilo.DesignTimePhoto");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->SelectedItem;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.Photo")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Photo", L"Hilo.DesignTimePhoto");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->Photo;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.YearGroups")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"YearGroups", L"Windows.Foundation.Collections.IObservableVector<Hilo.DesignTimeYearGroup>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->YearGroups;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.MonthGroups")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"MonthGroups", L"Windows.Foundation.Collections.IObservableVector<Hilo.DesignTimePhotoGroup>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->MonthGroups;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.HubPhotosGroup")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"HubPhotosGroup", L"Windows.Foundation.Collections.IObservableVector<Hilo.DesignTimePhotoGroup>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->HubPhotosGroup;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.Photos")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Photos", L"Windows.Foundation.Collections.IObservableVector<Hilo.DesignTimePhoto>");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->Photos;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    if (longMemberName == L"Hilo.DesignTimeData.Image")
    {
        ::XamlTypeInfo::InfoProvider::XamlMember^ xamlMember = ref new ::XamlTypeInfo::InfoProvider::XamlMember(this, L"Image", L"Windows.UI.Xaml.Media.ImageSource");
        xamlMember->Getter =
            [](Object^ instance) -> Object^
            {
                auto that = (::Hilo::DesignTimeData^)instance;
                return that->Image;
            };

        xamlMember->SetIsReadOnly();
        return xamlMember;
    }

    return nullptr;
}

